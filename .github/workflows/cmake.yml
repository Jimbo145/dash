name: Build and Release

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkou@v3

      - name: Set up Make and build dependencies
        run: |
          sudo apt-get update

          dependencies=(
          "alsa-utils"
          "cmake"
          "libboost-all-dev"
          "libusb-1.0.0-dev"
          "libssl-dev"
          "libprotobuf-dev"
          "protobuf-c-compiler"
          "protobuf-compiler"
          "libqt5multimedia5"
          "libqt5multimedia5-plugins"
          "libqt5multimediawidgets5"
          "qtmultimedia5-dev"
          "libqt5bluetooth5"
          "libqt5bluetooth5-bin"
          "qtconnectivity5-dev"
          "pulseaudio"
          "pulseaudio-module-bluetooth"
          "librtaudio-dev"
          "librtaudio6"
          "libkf5bluezqt-dev"
          "libtag1-dev"
          "qml-module-qtquick2"
          "libglib2.0-dev"
          "libgstreamer1.0-dev"
          "gstreamer1.0-plugins-base-apps"
          "gstreamer1.0-plugins-bad"
          "gstreamer1.0-libav"
          "gstreamer1.0-alsa"
          "libgstreamer-plugins-base1.0-dev"
          "qtdeclarative5-dev"
          "libgstreamer-plugins-bad1.0-dev"
          "libunwind-dev"
          "qml-module-qtmultimedia"
          "libqt5serialbus5-dev"
          "libqt5serialbus5-plugins"
          "libqt5serialport5-dev"
          "libqt5websockets5-dev"
          "libqt5svg5-dev"
          "build-essential"
          "libtool"
          "autoconf"
          "ffmpeg"
          )

          installString="sudo apt-get install -y "
          for i in ${dependencies[@]}; do
            installString+=" $i"
          done

          ${installString}

          if [[ $? -eq 0 ]]; then
            echo -e All dependencies Installed ok '\n'
          else
              echo Package failed to install with error code $?, quitting check logs above
              exit 1
          fi
          

      - name: Compile pulse audio
        run: |
          sudo sed -i 's/#deb-src/deb-src/g' /etc/apt/sources.list
          sudo apt-get update -y
          git clone git://anongit.freedesktop.org/pulseaudio/pulseaudio
          sudo apt-get install -y autopoint
          cd pulseaudio
          git checkout tags/v12.99.3
          echo Applying imtu patch
          sed -i 's/*imtu = 48;/*imtu = 60;/g' src/modules/bluetooth/backend-native.c
          sed -i 's/*imtu = 48;/*imtu = 60;/g' src/modules/bluetooth/backend-ofono.c
          sudo apt-get build-dep -y pulseaudio
          ./bootstrap.sh
          make -j4
          sudo make install
          sudo ldconfig
          # copy configs and force an exit 0 just in case files are identical (we don't care but it will make pimod exit)
          sudo cp /usr/share/pulseaudio/alsa-mixer/profile-sets/* /usr/local/share/pulseaudio/alsa-mixer/profile-sets/
          cd ..

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Release created automatically by GitHub Actions
          draft: false
          prerelease: false

      - name: Upload binary artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/your/binary # Update this with the actual path to your compiled binary
          asset_name: your_binary_name # Update this with the name you want for the binary in the release
          asset_content_type: application/octet-stream

